@inject IModalService _modalService

<tr class="dice-row">
    <td>
        <span class="dice-label">@Name</span>
    </td>
    <td>
        <div class="container pointer" @onclick="()=>Roll(20)" disabled="@(string.IsNullOrEmpty(_spin) == false)">
            <div class="container-shape @_spin">
                <i class="bi @Shape dice-shape" style="color: @Color"></i>
            </div>
            <div class="container-number">
                <span class="dice-number @(_result >= 10 ? "dice-shape-label-double" : "dice-shape-label-single")">@_result</span>
            </div>
        </div>
    </td>
    <td class="nowrap">
        <button class="btn btn-outline-info btn-reset" @onclick="History" disabled="@(string.IsNullOrEmpty(_spin) == false)">
            <span class="xCount">x@(_history.Count)</span>
            <br />
            <span class="xTotal">@(_history.Sum())</span>
        </button>
    </td>
</tr>

@code {

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public string Shape { get; set; }

    [Parameter]
    public int Size { get; set; }

    [Parameter]
    public string Color { get; set; }

    private string _spin  { get; set; }
    private List<int> _history { get; set; } = new List<int>();
    private int? _result { get; set; }
    private Random rand { get; set; } = new Random();

    async private Task Roll(int maximum)
    {
        _result = null;
        _spin = "dice-spin";
        StateHasChanged();
        await Task.Delay(400);
        _result = rand.Next(1, Size+1);
        _history.Add(_result.Value);

        _spin = "";
    }

    private void Reset()
    {
        _result = null;
        _history = new List<int>();
    }

    async private Task History()
    {
        if(_history.Count() > 0)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(HistoryDialog.History), _history);

            var modal = _modalService.Show<HistoryDialog>($"Roll History & Sum of {Name}", parameters);
            var modalResult = await modal.Result;

            if (modalResult.Cancelled) { }
            else
            {
                Reset();
            }
        }
    }

}
