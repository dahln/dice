<div class="dice-wrapper">
    <label class="dice-label">@Name</label>

    <i class="bi @Shape @_spin dice-shape"></i>
    <label class="dice-shape-label @(_result >= 10 ? "dice-shape-label-double" : "dice-shape-label-single")">@_result</label>

    <input type="button" value="Roll" class="btn btn-primary btn-lg btn-roll" @onclick="()=>Roll(20)" disabled="@(string.IsNullOrEmpty(_spin) == false)" />
    @if(_history.Count > 1)
    {
        <input type="button" value="@(_history.Sum())" class="btn btn-outline-warning btn-lg btn-total" @onclick="Reset" disabled="@(string.IsNullOrEmpty(_spin) == false)" />
    }
</div>

@code {

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public string Shape { get; set; }

    [Parameter]
    public int Size { get; set; }

    private string _spin  { get; set; }
    private List<int> _history { get; set; } = new List<int>();
    private int? _result { get; set; }
    private Random rand { get; set; } = new Random();

    async private Task Roll(int maximum)
    {
        _result = null;
        _spin = "dice-spin";
        StateHasChanged();
        await Task.Delay(400);
        _result = rand.Next(1, Size+1);
        _history.Add(_result.Value);

        _spin = "";
    }

    private void Reset()
    {
        _history = new List<int>();
    }

}
